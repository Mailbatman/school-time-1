generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
model User {
  id              String   @id @db.Uuid
  email           String   @unique
  firstName       String?
  lastName        String?
  createdAt       DateTime @default(now())
  role            Role     @default(PARENT_STUDENT)
  schoolId        String?
  school          School?  @relation(fields: [schoolId], references: [id])
  students            Student[] // For PARENT_STUDENT role
  teachingClasses     Class[]   @relation("ClassTeachers") // For TEACHER role
  classSubjects       ClassSubject[] @relation("ClassTeacher") // For TEACHER role
  approvedEnrollments SchoolEnrollment[] // For SUPER_ADMIN role
  schedules           Schedule[]

  @@index([role])
  @@index([schoolId])
}

model School {
  id           String            @id @default(cuid())
  name         String            @unique
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  users        User[]
  classes      Class[]
  students     Student[]
  enrollmentId String?           @unique
  enrollment   SchoolEnrollment? @relation(fields: [enrollmentId], references: [id])

  @@index([isActive])
  subjects     Subject[]
  schedules    Schedule[]
}

model Class {
  id            String         @id @default(cuid())
  name          String
  schoolId      String
  school        School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  students      Student[]
  teachers      User[]         @relation("ClassTeachers")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isActive      Boolean        @default(true)
  classSubjects ClassSubject[]
  schedules     Schedule[]

  @@index([schoolId])
  @@index([isActive])
}

model Student {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  classId   String
  class     Class    @relation(fields: [classId], references: [id])
  parentId  String   @db.Uuid
  parent    User     @relation(fields: [parentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])
  @@index([classId])
  @@index([parentId])
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
  SCHOOL_ADMIN
  TEACHER
  PARENT_STUDENT
}

model SchoolEnrollment {
  id                String           @id @default(cuid())
  schoolName        String
  contactName       String
  contactEmail      String           @unique
  contactPhone      String
  website           String?
  address           String
  city              String
  state             String
  zipCode           String
  estimatedStudents Int
  status            EnrollmentStatus @default(PENDING)
  school            School?

  approvedById      String?          @db.Uuid
  approvedBy        User?            @relation(fields: [approvedById], references: [id])
  approvedAt        DateTime?

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@index([status])
  @@index([approvedById])
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  REJECTED
}

model Subject {
  id            String         @id @default(cuid())
  name          String
  schoolId      String
  school        School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  classSubjects ClassSubject[]
  schedules     Schedule[]

  @@unique([name, schoolId])
  @@index([schoolId])
}

model ClassSubject {
  id        String   @id @default(cuid())
  classId   String
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  subjectId String
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacherId String?  @db.Uuid
  teacher   User?    @relation("ClassTeacher", fields: [teacherId], references: [id], onDelete: SetNull)

  @@unique([classId, subjectId])
  @@index([classId])
  @@index([subjectId])
  @@index([teacherId])
}

model Schedule {
  id        String    @id @default(cuid())
  dayOfWeek DayOfWeek
  startTime String // Store as "HH:mm"
  endTime   String // Store as "HH:mm"
  classId   String
  class     Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  subjectId String
  subject   Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacherId String    @db.Uuid
  teacher   User      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  schoolId  String
  school    School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([dayOfWeek, startTime, endTime, classId])
  @@unique([dayOfWeek, startTime, endTime, teacherId])
  @@index([classId])
  @@index([subjectId])
  @@index([teacherId])
  @@index([schoolId])
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
